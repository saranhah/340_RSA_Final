#!/usr/bin/python3
import sys
from math import gcd 
import random
from sympy import isprime
from egcd import egcd

def generate_public(phi_n):
    # we want to choose an e that is relatively prime to pq
    # p and q are both primes. the only numbers that are not relatively prime to pq are p and q. so we can choose an e such that e is 
    # somewhere in the range from 1 - pq such that e is not p or q. 
    relative_prime = False
    
    while not relative_prime:
        #print("entering relative prime for e test")
        e = random.randint(2, phi_n) # randomly choose a number in between 2 and phi of n (we don't want to choose 1, that doesn't encrypt)
        if gcd(e, phi_n) == 1:
            relative_prime = True # we've found a possible eâ€”continue
    return e
    

def phi(p):
    # this uses the number theory principle and requires both p and q to be prime. This is *sort of* cheating. there's a much slower way 
    # to calculate this using the gcd function from the math library. This just assumes that the input is prime
    return p-1
def encrypt(plaintext, key, mod):
    cipher = [pow(ord(char), key, mod) for char in plaintext]
    return cipher # this returns is as an array of bytes in unicode format

def retrieve_private_key(phi, key):
    """
        On the inputs of integers phi and key, retrieve_public_key finds the inverse of key in mod phi by using an implmentation of 
        Euclid's Extended Algorithm from the egcd library (see here https://pypi.org/project/egcd/). Ultimately, the private_key
        is some integer d such that de is congruent to 1 mod phi. This function always returns the positive representation of this number.
    """
    tuple = egcd(key, phi)
    private_key = tuple[1] # grab second value
    if private_key < 0: # case where private key is negative (we want positive only!) 
        private_key += phi
    return private_key
    
    
def decrypt(cipher, key, mod):
    # note that mod is pq 
    plain = [str(pow(char, key, mod)) for char in cipher]
    text = [chr(int(char)) for char in plain]
    return text

def rsa(p, q, plaintext):
    n = p*q
    phi_n = phi(p) * phi(q)
    public_key = generate_public(phi_n)
    cipher = encrypt(plaintext, public_key, n)
    private_key = retrieve_private_key(phi_n, public_key)
    plain = decrypt(cipher, private_key, n)
    print("This is your original message: ", plain)
    


def main():
    # read input from std in
    # we expect input to have this order: p1 p2 plaintext (with one space in between them) when run from command line
    if len(sys.argv) != 4:
        print("Please use format: ./rsa prime1 prime2 'plaintext goes here' separated by spaces.")
    else:
        # first check that inputs are correct
        p1 = int(sys.argv[1])
        p2 = int(sys.argv[2])
        plaintext = sys.argv[3]
        if (not isprime(p1) or not isprime(p2)): # case where inputs are not prime
            raise ValueError("Please input only prime numbers!")
        else:
            rsa(p1, p2, plaintext)
if __name__ == "__main__":
    main()
