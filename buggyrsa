#!/usr/bin/python3
import sys
from math import gcd 
import random
from sympy import isprime

def generate_public(phi_n):
    # we want to choose an e that is relatively prime to pq
    # p and q are both primes. the only numbers that are not relatively prime to pq are p and q. so we can choose an e such that e is 
    # somewhere in the range from 1 - pq such that e is not p or q. 
    relative_prime = False
    
    while not relative_prime:
        #print("entering relative prime for e test")
        e = random.randint(2, phi_n) # randomly choose a number in between 2 and phi of n (we don't want to choose 1, that doesn't encrypt)
        if gcd(e, phi_n) == 1:
            relative_prime = True # we've found a possible eâ€”continue
    #print("this is e: ", e)
    #print("exited e")
    return e
    
def euclid_extended(key, phi):
    """ Use this to find the multiplicative inverse for a given phi of n and key e. Euclid's Extended Division Algorithm attempts to find
    the values x and y such that ax + by = gcd(a, b). In this case, we care about the coefficient for a. This will tell us the multiplicative inverse.
    I referenced this video to create this code: 
    https://www.youtube.com/watch?v=kYasb426Yjk. 
    """
    # first run the euclidean algorithm, then keep track of old variables for backtracking
    d = 0 # d is going to be the mult. inverse
    x1 = 0
   
    x2 = 1 # this will act as the gcd on the lhs of the eq when we backtrack
    coeff = 1 # eventual coeff that we want to return paired in front of the original e
    
    
    lhs = phi 
    
    e = key 
    
    while e > 0: # do this until we've fully cycled through euclids
        intdiv = lhs//e
        remainder = lhs - intdiv * e
        lhs = e 
        e = remainder
      
        # store old variables by substituting in old vals
        x = x2 - (intdiv * x1)
        y = d - (intdiv * coeff)
      
        # preserve previous values and implement the "backtracking" in euclid's extended algorithm
        d = coeff
        coeff = y
        x2 = x1
        x1 = x
  
    
    if d < 0: # neg case. we need multiplicative inverse to be positive (use phi that we used as input)
        return phi + d
    else: # normal positive case
        return d
    
    
def phi(p):
    # this uses the number theory principle and requires both p and q to be prime. This is *sort of* cheating. there's a much slower way 
    # to calculate this using the gcd function from the math library. This just assumes that the input is prime
    return p-1
def encrypt(plaintext, key, mod):
    cipher = [pow(ord(char), key, mod) for char in plaintext]
    return cipher # this returns is as an array of bytes in unicode format

def retrieve_private_key(phi, key):
    # using p and q: want to find some d > 0 such that de = 1 mod phi n 
    # so we want to use euclid's extended division algorithm
    # and then check if the result is negative. if it is negative, then add to n to get pos version d
    return euclid_extended(key, phi)
    
    
def decrypt(cipher, key, mod):
    # note that mod is pq 
    plain = [str(pow(char, key, mod)) for char in cipher]
    text = [chr(int(char)) for char in plain]
    return text

def rsa(p, q, plaintext):
    n = p*q
    phi_n = phi(p) * phi(q)
    public_key = generate_public(phi_n)
    cipher = encrypt(plaintext, public_key, n)
    private_key = retrieve_private_key(phi_n, public_key)
    plain = decrypt(cipher, private_key, n)
    print("This is your original message: ", "hiii")
    

#TODO: 
# 1. Implement basic RSA using user input for primes (foundation implementation) 
# 2. set this up with PBT/have PBT generate primes. first assume that all inputs are prime numbers. 
#    (oracle should at this point just be checking that the decrypted message is the same as the plaintext that's been passed in)
# 3. find way for RSA to "check" for primes (using the miller-rabin test maybe)
# 4. Update Oracle to also generate non-prime numbers to input into RSA. we want RSA to reject non-prime numbers in *most* cases
# 5. Then update RSA to include digital signatures
# 6. Alloy model (ask Alexa about what kind of Alloy model this should be)

def main():
    # read input from std in
    # we expect input to have this order: p1 p2 plaintext (with one space in between them) when run from command line
    if len(sys.argv) != 4:
        print("Please use format: ./rsa prime1 prime2 'plaintext goes here' separated by spaces.")
    else:
        # first check that inputs are correct
        p1 = int(sys.argv[1])
        p2 = int(sys.argv[2])
        plaintext = sys.argv[3]
        if (not isprime(p1) or not isprime(p2)): # case where inputs are not prime
            raise ValueError("Please input only prime numbers!")
        else:
            rsa(p1, p2, plaintext)
if __name__ == "__main__":
    main()
